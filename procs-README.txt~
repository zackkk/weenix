Documentation for Kernel Assignment 1
=====================================

+--------------+
| TEAM MEMBERS |
+--------------+

+-------------+
| BUILD & RUN |
+-------------+

Comments:

To compile, run:

make clean
make

To execute:

./weenix -n

To test,

Faber test:

./weenix -n | grep faber_test.c

then type "ftest" in the weenix kshell

Sunghan producer/consumer test:

./weenix -n | grep sunghan_test.c

then type "stest" in the weenix kshell

Deadlock test:

./weenix -n | grep sunghan_test.c

then type "dtest" in the weenix kshell

To terminate cleanly, type "exit".


+------+
| SKIP |
+------+

All tests working.

+---------+
| GRADING |
+---------+

(A.1) In main/kmain.c:
    (a) In bootstrap(): 3 out of 3 pts
    (b) In initproc_create(): 3 out of 3 pts

(A.2) In proc/proc.c:
    (a) In proc_create(): 4 out of 4 pts
    (b) In proc_cleanup(): 5 out of 5 pts
    (c) In do_waitpid(): 8 out of 8 pts

(A.3) In proc/kthread.c:
    (a) In kthread_create(): 2 out of 2 pts
    (b) In kthread_cancel(): 1 out of 1 pt
    (c) In kthread_exit(): 3 out of 3 pts

(A.4) In proc/sched.c:
    (a) In sched_wakeup_on(): 1 out of 1 pt
    (b) In sched_make_runnable(): 1 out of 1 pt

(A.5) In proc/kmutex.c:
    (a) In kmutex_lock(): 1 out of 1 pt
    (b) In kmutex_lock_cancellable(): 1 out of 1 pt
    (c) In kmutex_unlock(): 2 out of 2 pts

(B) Kshell : 20 out of 20 pts
    Comments: none. 

(C.1) waitpid any test, etc. (4 out of 4 pts)
(C.2) Context switch test (1 out of 1 pt)
(C.3) wake me test, etc. (2 out of 2 pts)
(C.4) wake me uncancellable test, etc. (2 out of 2 pts)
(C.5) cancel me test, etc. (4 out of 4 pts)
(C.6) reparenting test, etc. (2 out of 2 pts)
(C.7) show race test, etc. (3 out of 3 pts)
(C.8) proc kill test (2 out of 2 pts)

(D.1) sunghan_test(): producer/consumer test (10 out of 10 pts)
(D.2) sunghan_deadlock_test(): deadlock test (5 out of 5 pts)

(E) Additional self-checks :
    Comments: 
	Run ./weenix -n | grep kmutex_code_path_check
	    ./weenix -n | grep kmain_code_path_check
            ./weenix -n | grep kthread_code_path_check
            ./weenix -n | grep proc_code_path_check
            ./weenix -n | grep sched_code_path_check
	then you can check each code path has been ran into.	

Missing required section(s) in README file (procs-README.txt): none.
Submitted binary file : no.
Submitted extra (unmodified) file : no.
Wrong file location in submission : no.
Use dbg_print(...) instead of dbg(DBG_PRINT, ...) : no.
Not properly indentify which dbg() printout is for which item in the grading guidelines : nope.
Cannot compile : compiles correctly.
Compiler warnings : none.
"make clean" : Yes.
Useless KASSERT : none.
Insufficient/Confusing dbg : no.
Kernel panic : no.
Cannot halt kernel cleanly : Halts cleanly.

+------+
| BUGS |
+------+

Comments: None.

+---------------------------+
| CONTRIBUTION FROM MEMBERS |
+---------------------------+

Members of the team shared responsibilities equally (25%/25%/25%/25%).

+-------+
| OTHER |
+-------+

Special DBG setting in Config.mk for certain tests: none
Comments on deviation from spec (you will still lose points, but it's better to let the grader know): No deviation from spec.
General comments on design decisions: We had to declare the test functions as extern in kmain, for the compiler to use them without warnings.

